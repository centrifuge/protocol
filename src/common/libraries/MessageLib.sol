// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.28;

import {BytesLib} from "src/misc/libraries/BytesLib.sol";
import {CastLib} from "src/misc/libraries/CastLib.sol";

import {PoolId} from "src/common/types/PoolId.sol";

enum MessageType {
    /// @dev Placeholder for null message type
    _Invalid,
    /// @dev Placeholder for proof message type
    _MessageProof,
    // -- Gateway messages
    InitiateRecovery,
    DisputeRecovery,
    // -- Root messages
    ScheduleUpgrade,
    CancelUpgrade,
    RecoverTokens,
    // -- Pool manager messages
    RegisterAsset,
    NotifyPool,
    NotifyShareClass,
    NotifyPricePoolPerShare,
    NotifyPricePoolPerAsset,
    NotifyShareMetadata,
    UpdateShareHook,
    TransferShares,
    UpdateRestriction,
    UpdateContract,
    ApprovedDeposits,
    IssuedShares,
    RevokedShares,
    // -- Investment manager messages
    DepositRequest,
    RedeemRequest,
    FulfilledDepositRequest,
    FulfilledRedeemRequest,
    CancelDepositRequest,
    CancelRedeemRequest,
    FulfilledCancelDepositRequest,
    FulfilledCancelRedeemRequest,
    // -- BalanceSheet messages
    UpdateHoldingAmount,
    UpdateShares,
    TriggerUpdateShares,
    TriggerSubmitQueuedShares,
    TriggerSubmitQueuedAssets,
    SetQueue
}

enum UpdateRestrictionType {
    /// @dev Placeholder for null update restriction type
    Invalid,
    Member,
    Freeze,
    Unfreeze
}

enum UpdateContractType {
    /// @dev Placeholder for null update restriction type
    Invalid,
    VaultUpdate,
    UpdateManager,
    MaxAssetPriceAge,
    MaxSharePriceAge,
    Valuation,
    SyncDepositMaxReserve
}

/// @dev Used internally in the VaultUpdateMessage (not represent a submessage)
enum VaultUpdateKind {
    DeployAndLink,
    Link,
    Unlink
}

library MessageLib {
    using MessageLib for bytes;
    using BytesLib for bytes;
    using CastLib for *;

    error UnknownMessageType();

    /// @dev Encode all message lengths in this constant to avoid a large list of if/elseif checks
    /// and reduce generated bytecode.
    /// If the message has some dynamic part, will be added later in `messageLength()`.
    // forgefmt: disable-next-item
    uint256 constant MESSAGE_LENGTHS_1 =
        (67  << uint8(MessageType.InitiateRecovery) * 8) +
        (67  << uint8(MessageType.DisputeRecovery) * 8) +
        (33  << uint8(MessageType.ScheduleUpgrade) * 8) +
        (33  << uint8(MessageType.CancelUpgrade) * 8) +
        (161 << uint8(MessageType.RecoverTokens) * 8) +
        (18  << uint8(MessageType.RegisterAsset) * 8) +
        (9   << uint8(MessageType.NotifyPool) * 8) +
        (250 << uint8(MessageType.NotifyShareClass) * 8) +
        (49  << uint8(MessageType.NotifyPricePoolPerShare) * 8) +
        (65  << uint8(MessageType.NotifyPricePoolPerAsset) * 8) +
        (185 << uint8(MessageType.NotifyShareMetadata) * 8) +
        (57  << uint8(MessageType.UpdateShareHook) * 8) +
        (73  << uint8(MessageType.TransferShares) * 8) +
        (25  << uint8(MessageType.UpdateRestriction) * 8) +
        (57  << uint8(MessageType.UpdateContract) * 8) +
        (73  << uint8(MessageType.ApprovedDeposits) * 8) +
        (57  << uint8(MessageType.IssuedShares) * 8) +
        (89  << uint8(MessageType.RevokedShares) * 8) +
        (89  << uint8(MessageType.DepositRequest) * 8) +
        (89  << uint8(MessageType.RedeemRequest) * 8) +
        (105 << uint8(MessageType.FulfilledDepositRequest) * 8) +
        (105 << uint8(MessageType.FulfilledRedeemRequest) * 8) +
        (73  << uint8(MessageType.CancelDepositRequest) * 8) +
        (73  << uint8(MessageType.CancelRedeemRequest) * 8) +
        (89  << uint8(MessageType.FulfilledCancelDepositRequest) * 8) +
        (89  << uint8(MessageType.FulfilledCancelRedeemRequest) * 8) +
        (114 << uint8(MessageType.UpdateHoldingAmount) * 8) +
        (50  << uint8(MessageType.UpdateShares) * 8) +
        (74  << uint8(MessageType.TriggerUpdateShares) * 8) +
        (25  << uint8(MessageType.TriggerSubmitQueuedShares) * 8);

    // forgefmt: disable-next-item
    uint256 constant MESSAGE_LENGTHS_2 =
        (41 << (uint8(MessageType.TriggerSubmitQueuedAssets) - 32) * 8) +
        (26 << (uint8(MessageType.SetQueue) - 32) * 8);

    function messageType(bytes memory message) internal pure returns (MessageType) {
        return MessageType(message.toUint8(0));
    }

    function messageCode(bytes memory message) internal pure returns (uint8) {
        return message.toUint8(0);
    }

    function messageLength(bytes memory message) internal pure returns (uint16 length) {
        uint8 kind = message.toUint8(0);
        require(kind <= uint8(type(MessageType).max), UnknownMessageType());

        length = (kind <= 31)
            ? uint16(uint8(bytes32(MESSAGE_LENGTHS_1)[31 - kind]))
            : uint16(uint8(bytes32(MESSAGE_LENGTHS_2)[63 - kind]));

        // Spetial treatment for messages with dynamic size:
        if (kind == uint8(MessageType.UpdateRestriction)) {
            length += 2 + message.toUint16(length); //payloadLength
        } else if (kind == uint8(MessageType.UpdateContract)) {
            length += 2 + message.toUint16(length); //payloadLength
        }
    }

    function messagePoolId(bytes memory message) internal pure returns (PoolId poolId) {
        uint8 kind = message.toUint8(0);

        // All messages from NotifyPool to SetQueue contains a PoolId in position 1.
        if (kind >= uint8(MessageType.NotifyPool) && kind <= uint8(MessageType.SetQueue)) {
            return PoolId.wrap(message.toUint64(1));
        } else {
            return PoolId.wrap(0);
        }
    }

    function updateRestrictionType(bytes memory message) internal pure returns (UpdateRestrictionType) {
        return UpdateRestrictionType(message.toUint8(0));
    }

    function updateContractType(bytes memory message) internal pure returns (UpdateContractType) {
        return UpdateContractType(message.toUint8(0));
    }

    //---------------------------------------
    //    InitiateRecovery
    //---------------------------------------

    struct InitiateRecovery {
        bytes32 hash;
        bytes32 adapter;
        uint16 centrifugeId;
    }

    function deserializeInitiateRecovery(bytes memory data) internal pure returns (InitiateRecovery memory) {
        require(messageType(data) == MessageType.InitiateRecovery, UnknownMessageType());
        return InitiateRecovery({hash: data.toBytes32(1), adapter: data.toBytes32(33), centrifugeId: data.toUint16(65)});
    }

    function serialize(InitiateRecovery memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.InitiateRecovery, t.hash, t.adapter, t.centrifugeId);
    }

    //---------------------------------------
    //    DisputeRecovery
    //---------------------------------------

    struct DisputeRecovery {
        bytes32 hash;
        bytes32 adapter;
        uint16 centrifugeId;
    }

    function deserializeDisputeRecovery(bytes memory data) internal pure returns (DisputeRecovery memory) {
        require(messageType(data) == MessageType.DisputeRecovery, UnknownMessageType());
        return DisputeRecovery({hash: data.toBytes32(1), adapter: data.toBytes32(33), centrifugeId: data.toUint16(65)});
    }

    function serialize(DisputeRecovery memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.DisputeRecovery, t.hash, t.adapter, t.centrifugeId);
    }

    //---------------------------------------
    //    ScheduleUpgrade
    //---------------------------------------

    struct ScheduleUpgrade {
        bytes32 target;
    }

    function deserializeScheduleUpgrade(bytes memory data) internal pure returns (ScheduleUpgrade memory) {
        require(messageType(data) == MessageType.ScheduleUpgrade, UnknownMessageType());
        return ScheduleUpgrade({target: data.toBytes32(1)});
    }

    function serialize(ScheduleUpgrade memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.ScheduleUpgrade, t.target);
    }

    //---------------------------------------
    //    CancelUpgrade
    //---------------------------------------

    struct CancelUpgrade {
        bytes32 target;
    }

    function deserializeCancelUpgrade(bytes memory data) internal pure returns (CancelUpgrade memory) {
        require(messageType(data) == MessageType.CancelUpgrade, UnknownMessageType());
        return CancelUpgrade({target: data.toBytes32(1)});
    }

    function serialize(CancelUpgrade memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.CancelUpgrade, t.target);
    }

    //---------------------------------------
    //    RecoverTokens
    //---------------------------------------

    struct RecoverTokens {
        bytes32 target;
        bytes32 token;
        uint256 tokenId;
        bytes32 to;
        uint256 amount;
    }

    function deserializeRecoverTokens(bytes memory data) internal pure returns (RecoverTokens memory) {
        require(messageType(data) == MessageType.RecoverTokens, UnknownMessageType());
        return RecoverTokens({
            target: data.toBytes32(1),
            token: data.toBytes32(33),
            tokenId: data.toUint256(65),
            to: data.toBytes32(97),
            amount: data.toUint256(129)
        });
    }

    function serialize(RecoverTokens memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.RecoverTokens, t.target, t.token, t.tokenId, t.to, t.amount);
    }

    //---------------------------------------
    //    RegisterAsset
    //---------------------------------------

    struct RegisterAsset {
        uint128 assetId;
        uint8 decimals;
    }

    function deserializeRegisterAsset(bytes memory data) internal pure returns (RegisterAsset memory) {
        require(messageType(data) == MessageType.RegisterAsset, UnknownMessageType());
        return RegisterAsset({assetId: data.toUint128(1), decimals: data.toUint8(17)});
    }

    function serialize(RegisterAsset memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.RegisterAsset, t.assetId, t.decimals);
    }

    //---------------------------------------
    //    NotifyPool
    //---------------------------------------

    struct NotifyPool {
        uint64 poolId;
    }

    function deserializeNotifyPool(bytes memory data) internal pure returns (NotifyPool memory) {
        require(messageType(data) == MessageType.NotifyPool, UnknownMessageType());
        return NotifyPool({poolId: data.toUint64(1)});
    }

    function serialize(NotifyPool memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.NotifyPool, t.poolId);
    }

    //---------------------------------------
    //    NotifyShareClass
    //---------------------------------------

    struct NotifyShareClass {
        uint64 poolId;
        bytes16 scId;
        string name; // Fixed to 128 bytes
        bytes32 symbol; // utf8
        uint8 decimals;
        bytes32 salt;
        bytes32 hook;
    }

    function deserializeNotifyShareClass(bytes memory data) internal pure returns (NotifyShareClass memory) {
        require(messageType(data) == MessageType.NotifyShareClass, UnknownMessageType());
        return NotifyShareClass({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            name: data.slice(25, 128).bytes128ToString(),
            symbol: data.toBytes32(153),
            decimals: data.toUint8(185),
            salt: data.toBytes32(186),
            hook: data.toBytes32(218)
        });
    }

    function serialize(NotifyShareClass memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(
            MessageType.NotifyShareClass,
            t.poolId,
            t.scId,
            bytes(t.name).sliceZeroPadded(0, 128),
            t.symbol,
            t.decimals,
            t.salt,
            t.hook
        );
    }

    //---------------------------------------
    //    NotifyPricePoolPerShare
    //---------------------------------------

    struct NotifyPricePoolPerShare {
        uint64 poolId;
        bytes16 scId;
        uint128 price;
        uint64 timestamp;
    }

    function deserializeNotifyPricePoolPerShare(bytes memory data)
        internal
        pure
        returns (NotifyPricePoolPerShare memory)
    {
        require(messageType(data) == MessageType.NotifyPricePoolPerShare, UnknownMessageType());
        return NotifyPricePoolPerShare({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            price: data.toUint128(25),
            timestamp: data.toUint64(41)
        });
    }

    function serialize(NotifyPricePoolPerShare memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.NotifyPricePoolPerShare, t.poolId, t.scId, t.price, t.timestamp);
    }

    //---------------------------------------
    //    NotifyPricePoolPerAsset
    //---------------------------------------

    struct NotifyPricePoolPerAsset {
        uint64 poolId;
        bytes16 scId;
        uint128 assetId;
        uint128 price;
        uint64 timestamp;
    }

    function deserializeNotifyPricePoolPerAsset(bytes memory data)
        internal
        pure
        returns (NotifyPricePoolPerAsset memory)
    {
        require(messageType(data) == MessageType.NotifyPricePoolPerAsset, UnknownMessageType());
        return NotifyPricePoolPerAsset({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            assetId: data.toUint128(25),
            price: data.toUint128(41),
            timestamp: data.toUint64(57)
        });
    }

    function serialize(NotifyPricePoolPerAsset memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.NotifyPricePoolPerAsset, t.poolId, t.scId, t.assetId, t.price, t.timestamp);
    }

    //---------------------------------------
    //    NotifyShareMetadata
    //---------------------------------------

    struct NotifyShareMetadata {
        uint64 poolId;
        bytes16 scId;
        string name; // Fixed to 128 bytes
        bytes32 symbol; // utf8
    }

    function deserializeNotifyShareMetadata(bytes memory data) internal pure returns (NotifyShareMetadata memory) {
        require(messageType(data) == MessageType.NotifyShareMetadata, UnknownMessageType());
        return NotifyShareMetadata({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            name: data.slice(25, 128).bytes128ToString(),
            symbol: data.toBytes32(153)
        });
    }

    function serialize(NotifyShareMetadata memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(
            MessageType.NotifyShareMetadata, t.poolId, t.scId, bytes(t.name).sliceZeroPadded(0, 128), t.symbol
        );
    }

    //---------------------------------------
    //    UpdateShareHook
    //---------------------------------------

    struct UpdateShareHook {
        uint64 poolId;
        bytes16 scId;
        bytes32 hook;
    }

    function deserializeUpdateShareHook(bytes memory data) internal pure returns (UpdateShareHook memory) {
        require(messageType(data) == MessageType.UpdateShareHook, UnknownMessageType());
        return UpdateShareHook({poolId: data.toUint64(1), scId: data.toBytes16(9), hook: data.toBytes32(25)});
    }

    function serialize(UpdateShareHook memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.UpdateShareHook, t.poolId, t.scId, t.hook);
    }

    //---------------------------------------
    //    TransferShares
    //---------------------------------------

    struct TransferShares {
        uint64 poolId;
        bytes16 scId;
        bytes32 receiver;
        uint128 amount;
    }

    function deserializeTransferShares(bytes memory data) internal pure returns (TransferShares memory) {
        require(messageType(data) == MessageType.TransferShares, UnknownMessageType());
        return TransferShares({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            receiver: data.toBytes32(25),
            amount: data.toUint128(57)
        });
    }

    function serialize(TransferShares memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.TransferShares, t.poolId, t.scId, t.receiver, t.amount);
    }

    //---------------------------------------
    //    UpdateRestriction
    //---------------------------------------

    struct UpdateRestriction {
        uint64 poolId;
        bytes16 scId;
        bytes payload; // As sequence of bytes
    }

    function deserializeUpdateRestriction(bytes memory data) internal pure returns (UpdateRestriction memory) {
        require(messageType(data) == MessageType.UpdateRestriction, UnknownMessageType());

        uint16 payloadLength = data.toUint16(25);
        return UpdateRestriction({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            payload: data.slice(27, payloadLength)
        });
    }

    function serialize(UpdateRestriction memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.UpdateRestriction, t.poolId, t.scId, uint16(t.payload.length), t.payload);
    }

    //---------------------------------------
    //    UpdateRestrictionMember (submsg)
    //---------------------------------------

    struct UpdateRestrictionMember {
        bytes32 user;
        uint64 validUntil;
    }

    function deserializeUpdateRestrictionMember(bytes memory data)
        internal
        pure
        returns (UpdateRestrictionMember memory)
    {
        require(updateRestrictionType(data) == UpdateRestrictionType.Member, UnknownMessageType());

        return UpdateRestrictionMember({user: data.toBytes32(1), validUntil: data.toUint64(33)});
    }

    function serialize(UpdateRestrictionMember memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(UpdateRestrictionType.Member, t.user, t.validUntil);
    }

    //---------------------------------------
    //    UpdateRestrictionFreeze (submsg)
    //---------------------------------------

    struct UpdateRestrictionFreeze {
        bytes32 user;
    }

    function deserializeUpdateRestrictionFreeze(bytes memory data)
        internal
        pure
        returns (UpdateRestrictionFreeze memory)
    {
        require(updateRestrictionType(data) == UpdateRestrictionType.Freeze, UnknownMessageType());

        return UpdateRestrictionFreeze({user: data.toBytes32(1)});
    }

    function serialize(UpdateRestrictionFreeze memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(UpdateRestrictionType.Freeze, t.user);
    }

    //---------------------------------------
    //    UpdateRestrictionUnfreeze (submsg)
    //---------------------------------------

    struct UpdateRestrictionUnfreeze {
        bytes32 user;
    }

    function deserializeUpdateRestrictionUnfreeze(bytes memory data)
        internal
        pure
        returns (UpdateRestrictionUnfreeze memory)
    {
        require(updateRestrictionType(data) == UpdateRestrictionType.Unfreeze, UnknownMessageType());

        return UpdateRestrictionUnfreeze({user: data.toBytes32(1)});
    }

    function serialize(UpdateRestrictionUnfreeze memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(UpdateRestrictionType.Unfreeze, t.user);
    }

    //---------------------------------------
    //    UpdateContract
    //---------------------------------------

    struct UpdateContract {
        uint64 poolId;
        bytes16 scId;
        bytes32 target;
        bytes payload; // As sequence of bytes
    }

    function deserializeUpdateContract(bytes memory data) internal pure returns (UpdateContract memory) {
        require(messageType(data) == MessageType.UpdateContract, UnknownMessageType());
        uint16 payloadLength = data.toUint16(57);
        return UpdateContract({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            target: data.toBytes32(25),
            payload: data.slice(59, payloadLength)
        });
    }

    function serialize(UpdateContract memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(
            MessageType.UpdateContract, t.poolId, t.scId, t.target, uint16(t.payload.length), t.payload
        );
    }

    //---------------------------------------
    //   UpdateContract.VaultUpdate (submsg)
    //---------------------------------------

    struct UpdateContractVaultUpdate {
        bytes32 vaultOrFactory;
        uint128 assetId;
        uint8 kind;
    }

    function deserializeUpdateContractVaultUpdate(bytes memory data)
        internal
        pure
        returns (UpdateContractVaultUpdate memory)
    {
        require(updateContractType(data) == UpdateContractType.VaultUpdate, UnknownMessageType());

        return UpdateContractVaultUpdate({
            vaultOrFactory: data.toBytes32(1),
            assetId: data.toUint128(33),
            kind: data.toUint8(49)
        });
    }

    function serialize(UpdateContractVaultUpdate memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(UpdateContractType.VaultUpdate, t.vaultOrFactory, t.assetId, t.kind);
    }

    //---------------------------------------
    //   UpdateContract.UpdateManager (submsg)
    //---------------------------------------

    struct UpdateContractUpdateManager {
        bytes32 who;
        bool canManage;
    }

    function deserializeUpdateContractUpdateManager(bytes memory data)
        internal
        pure
        returns (UpdateContractUpdateManager memory)
    {
        require(updateContractType(data) == UpdateContractType.UpdateManager, UnknownMessageType());

        return UpdateContractUpdateManager({who: data.toBytes32(1), canManage: data.toBool(33)});
    }

    function serialize(UpdateContractUpdateManager memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(UpdateContractType.UpdateManager, t.who, t.canManage);
    }

    //---------------------------------------
    //   UpdateContract.MaxAssetPriceAge (submsg)
    //---------------------------------------

    struct UpdateContractMaxAssetPriceAge {
        uint128 assetId;
        uint64 maxPriceAge;
    }

    function deserializeUpdateContractMaxAssetPriceAge(bytes memory data)
        internal
        pure
        returns (UpdateContractMaxAssetPriceAge memory)
    {
        require(updateContractType(data) == UpdateContractType.MaxAssetPriceAge, UnknownMessageType());

        return UpdateContractMaxAssetPriceAge({assetId: data.toUint128(1), maxPriceAge: data.toUint64(17)});
    }

    function serialize(UpdateContractMaxAssetPriceAge memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(UpdateContractType.MaxAssetPriceAge, t.assetId, t.maxPriceAge);
    }

    //---------------------------------------
    //   UpdateContract.MaxSharePriceAge (submsg)
    //---------------------------------------

    struct UpdateContractMaxSharePriceAge {
        uint64 maxPriceAge;
    }

    function deserializeUpdateContractMaxSharePriceAge(bytes memory data)
        internal
        pure
        returns (UpdateContractMaxSharePriceAge memory)
    {
        require(updateContractType(data) == UpdateContractType.MaxSharePriceAge, UnknownMessageType());

        return UpdateContractMaxSharePriceAge({maxPriceAge: data.toUint64(1)});
    }

    function serialize(UpdateContractMaxSharePriceAge memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(UpdateContractType.MaxSharePriceAge, t.maxPriceAge);
    }

    //---------------------------------------
    //   UpdateContract.Valuation (submsg)
    //---------------------------------------

    struct UpdateContractValuation {
        bytes32 valuation;
    }

    function deserializeUpdateContractValuation(bytes memory data)
        internal
        pure
        returns (UpdateContractValuation memory)
    {
        require(updateContractType(data) == UpdateContractType.Valuation, UnknownMessageType());

        return UpdateContractValuation({valuation: data.toBytes32(1)});
    }

    function serialize(UpdateContractValuation memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(UpdateContractType.Valuation, t.valuation);
    }

    //---------------------------------------
    //   UpdateContract.SyncDepositMaxReserve (submsg)
    //---------------------------------------

    struct UpdateContractSyncDepositMaxReserve {
        uint128 assetId;
        uint128 maxReserve;
    }

    function deserializeUpdateContractSyncDepositMaxReserve(bytes memory data)
        internal
        pure
        returns (UpdateContractSyncDepositMaxReserve memory)
    {
        require(updateContractType(data) == UpdateContractType.SyncDepositMaxReserve, UnknownMessageType());

        return UpdateContractSyncDepositMaxReserve({assetId: data.toUint128(1), maxReserve: data.toUint128(17)});
    }

    function serialize(UpdateContractSyncDepositMaxReserve memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(UpdateContractType.SyncDepositMaxReserve, t.assetId, t.maxReserve);
    }

    //---------------------------------------
    //    DepositRequest
    //---------------------------------------

    struct DepositRequest {
        uint64 poolId;
        bytes16 scId;
        bytes32 investor;
        uint128 assetId;
        uint128 amount;
    }

    function deserializeDepositRequest(bytes memory data) internal pure returns (DepositRequest memory) {
        require(messageType(data) == MessageType.DepositRequest, UnknownMessageType());
        return DepositRequest({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            investor: data.toBytes32(25),
            assetId: data.toUint128(57),
            amount: data.toUint128(73)
        });
    }

    function serialize(DepositRequest memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.DepositRequest, t.poolId, t.scId, t.investor, t.assetId, t.amount);
    }

    //---------------------------------------
    //    RedeemRequest
    //---------------------------------------

    struct RedeemRequest {
        uint64 poolId;
        bytes16 scId;
        bytes32 investor;
        uint128 assetId;
        uint128 amount;
    }

    function deserializeRedeemRequest(bytes memory data) internal pure returns (RedeemRequest memory) {
        require(messageType(data) == MessageType.RedeemRequest, UnknownMessageType());
        return RedeemRequest({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            investor: data.toBytes32(25),
            assetId: data.toUint128(57),
            amount: data.toUint128(73)
        });
    }

    function serialize(RedeemRequest memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.RedeemRequest, t.poolId, t.scId, t.investor, t.assetId, t.amount);
    }

    //---------------------------------------
    //    CancelDepositRequest
    //---------------------------------------

    struct CancelDepositRequest {
        uint64 poolId;
        bytes16 scId;
        bytes32 investor;
        uint128 assetId;
    }

    function deserializeCancelDepositRequest(bytes memory data) internal pure returns (CancelDepositRequest memory) {
        require(messageType(data) == MessageType.CancelDepositRequest, UnknownMessageType());
        return CancelDepositRequest({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            investor: data.toBytes32(25),
            assetId: data.toUint128(57)
        });
    }

    function serialize(CancelDepositRequest memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.CancelDepositRequest, t.poolId, t.scId, t.investor, t.assetId);
    }

    //---------------------------------------
    //    CancelRedeemRequest
    //---------------------------------------

    struct CancelRedeemRequest {
        uint64 poolId;
        bytes16 scId;
        bytes32 investor;
        uint128 assetId;
    }

    function deserializeCancelRedeemRequest(bytes memory data) internal pure returns (CancelRedeemRequest memory) {
        require(messageType(data) == MessageType.CancelRedeemRequest, UnknownMessageType());
        return CancelRedeemRequest({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            investor: data.toBytes32(25),
            assetId: data.toUint128(57)
        });
    }

    function serialize(CancelRedeemRequest memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.CancelRedeemRequest, t.poolId, t.scId, t.investor, t.assetId);
    }

    //---------------------------------------
    //    FulfilledDepositRequest
    //---------------------------------------

    struct FulfilledDepositRequest {
        uint64 poolId;
        bytes16 scId;
        bytes32 investor;
        uint128 assetId;
        uint128 assetAmount;
        uint128 shareAmount;
    }

    function deserializeFulfilledDepositRequest(bytes memory data)
        internal
        pure
        returns (FulfilledDepositRequest memory)
    {
        require(messageType(data) == MessageType.FulfilledDepositRequest, UnknownMessageType());
        return FulfilledDepositRequest({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            investor: data.toBytes32(25),
            assetId: data.toUint128(57),
            assetAmount: data.toUint128(73),
            shareAmount: data.toUint128(89)
        });
    }

    function serialize(FulfilledDepositRequest memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(
            MessageType.FulfilledDepositRequest, t.poolId, t.scId, t.investor, t.assetId, t.assetAmount, t.shareAmount
        );
    }

    //---------------------------------------
    //    FulfilledRedeemRequest
    //---------------------------------------

    struct FulfilledRedeemRequest {
        uint64 poolId;
        bytes16 scId;
        bytes32 investor;
        uint128 assetId;
        uint128 assetAmount;
        uint128 shareAmount;
    }

    function deserializeFulfilledRedeemRequest(bytes memory data)
        internal
        pure
        returns (FulfilledRedeemRequest memory)
    {
        require(messageType(data) == MessageType.FulfilledRedeemRequest, UnknownMessageType());
        return FulfilledRedeemRequest({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            investor: data.toBytes32(25),
            assetId: data.toUint128(57),
            assetAmount: data.toUint128(73),
            shareAmount: data.toUint128(89)
        });
    }

    function serialize(FulfilledRedeemRequest memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(
            MessageType.FulfilledRedeemRequest, t.poolId, t.scId, t.investor, t.assetId, t.assetAmount, t.shareAmount
        );
    }

    //---------------------------------------
    //    FulfilledCancelDepositRequest
    //---------------------------------------

    struct FulfilledCancelDepositRequest {
        uint64 poolId;
        bytes16 scId;
        bytes32 investor;
        uint128 assetId;
        uint128 cancelledAmount;
    }

    function deserializeFulfilledCancelDepositRequest(bytes memory data)
        internal
        pure
        returns (FulfilledCancelDepositRequest memory)
    {
        require(messageType(data) == MessageType.FulfilledCancelDepositRequest, UnknownMessageType());
        return FulfilledCancelDepositRequest({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            investor: data.toBytes32(25),
            assetId: data.toUint128(57),
            cancelledAmount: data.toUint128(73)
        });
    }

    function serialize(FulfilledCancelDepositRequest memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(
            MessageType.FulfilledCancelDepositRequest, t.poolId, t.scId, t.investor, t.assetId, t.cancelledAmount
        );
    }

    //---------------------------------------
    //    FulfilledCancelRedeemRequest
    //---------------------------------------

    struct FulfilledCancelRedeemRequest {
        uint64 poolId;
        bytes16 scId;
        bytes32 investor;
        uint128 assetId;
        uint128 cancelledShares;
    }

    function deserializeFulfilledCancelRedeemRequest(bytes memory data)
        internal
        pure
        returns (FulfilledCancelRedeemRequest memory)
    {
        require(messageType(data) == MessageType.FulfilledCancelRedeemRequest, UnknownMessageType());
        return FulfilledCancelRedeemRequest({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            investor: data.toBytes32(25),
            assetId: data.toUint128(57),
            cancelledShares: data.toUint128(73)
        });
    }

    function serialize(FulfilledCancelRedeemRequest memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(
            MessageType.FulfilledCancelRedeemRequest, t.poolId, t.scId, t.investor, t.assetId, t.cancelledShares
        );
    }

    //---------------------------------------
    //    UpdateHoldingAmount
    //---------------------------------------

    struct UpdateHoldingAmount {
        uint64 poolId;
        bytes16 scId;
        uint128 assetId;
        bytes32 who;
        uint128 amount;
        uint128 pricePerUnit;
        uint64 timestamp;
        bool isIncrease; // Signals whether this is an increase or a decrease
    }

    function deserializeUpdateHoldingAmount(bytes memory data) internal pure returns (UpdateHoldingAmount memory h) {
        require(messageType(data) == MessageType.UpdateHoldingAmount, "UnknownMessageType");

        return UpdateHoldingAmount({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            assetId: data.toUint128(25),
            who: data.toBytes32(41),
            amount: data.toUint128(73),
            pricePerUnit: data.toUint128(89),
            timestamp: data.toUint64(105),
            isIncrease: data.toBool(113)
        });
    }

    function serialize(UpdateHoldingAmount memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(
            MessageType.UpdateHoldingAmount,
            t.poolId,
            t.scId,
            t.assetId,
            t.who,
            t.amount,
            t.pricePerUnit,
            t.timestamp,
            t.isIncrease
        );
    }

    //---------------------------------------
    //    UpdateShares
    //---------------------------------------

    struct UpdateShares {
        uint64 poolId;
        bytes16 scId;
        uint128 shares;
        uint64 timestamp;
        bool isIssuance;
    }

    function deserializeUpdateShares(bytes memory data) internal pure returns (UpdateShares memory) {
        require(messageType(data) == MessageType.UpdateShares, UnknownMessageType());

        return UpdateShares({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            shares: data.toUint128(25),
            timestamp: data.toUint64(41),
            isIssuance: data.toBool(49)
        });
    }

    function serialize(UpdateShares memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.UpdateShares, t.poolId, t.scId, t.shares, t.timestamp, t.isIssuance);
    }

    //---------------------------------------
    //    ApprovedDeposits
    //---------------------------------------

    struct ApprovedDeposits {
        uint64 poolId;
        bytes16 scId;
        uint128 assetId;
        uint128 assetAmount;
        uint128 pricePoolPerAsset;
    }

    function deserializeApprovedDeposits(bytes memory data) internal pure returns (ApprovedDeposits memory) {
        require(messageType(data) == MessageType.ApprovedDeposits, UnknownMessageType());

        return ApprovedDeposits({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            assetId: data.toUint128(25),
            assetAmount: data.toUint128(41),
            pricePoolPerAsset: data.toUint128(57)
        });
    }

    function serialize(ApprovedDeposits memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(
            MessageType.ApprovedDeposits, t.poolId, t.scId, t.assetId, t.assetAmount, t.pricePoolPerAsset
        );
    }

    //---------------------------------------
    //    IssuedShares
    //---------------------------------------

    struct IssuedShares {
        uint64 poolId;
        bytes16 scId;
        uint128 shareAmount;
        uint128 pricePoolPerShare;
    }

    function deserializeIssuedShares(bytes memory data) internal pure returns (IssuedShares memory) {
        require(messageType(data) == MessageType.IssuedShares, UnknownMessageType());

        return IssuedShares({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            shareAmount: data.toUint128(25),
            pricePoolPerShare: data.toUint128(41)
        });
    }

    function serialize(IssuedShares memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.IssuedShares, t.poolId, t.scId, t.shareAmount, t.pricePoolPerShare);
    }

    //---------------------------------------
    //    RevokedShares
    //---------------------------------------

    struct RevokedShares {
        uint64 poolId;
        bytes16 scId;
        uint128 assetId;
        uint128 shareAmount;
        uint128 pricePoolPerShare;
        uint128 assetAmount;
    }

    function deserializeRevokedShares(bytes memory data) internal pure returns (RevokedShares memory) {
        require(messageType(data) == MessageType.RevokedShares, UnknownMessageType());

        return RevokedShares({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            assetId: data.toUint128(25),
            assetAmount: data.toUint128(41),
            shareAmount: data.toUint128(57),
            pricePoolPerShare: data.toUint128(73)
        });
    }

    function serialize(RevokedShares memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(
            MessageType.RevokedShares, t.poolId, t.scId, t.assetId, t.assetAmount, t.shareAmount, t.pricePoolPerShare
        );
    }


    //---------------------------------------
    //    TriggerUpdateShares
    //---------------------------------------

    struct TriggerUpdateShares {
        uint64 poolId;
        bytes16 scId;
        bytes32 who;
        uint128 shares;
        bool isIssuance;
    }

    function deserializeTriggerUpdateShares(bytes memory data) internal pure returns (TriggerUpdateShares memory) {
        require(messageType(data) == MessageType.TriggerUpdateShares, UnknownMessageType());

        return TriggerUpdateShares({
            poolId: data.toUint64(1),
            scId: data.toBytes16(9),
            who: data.toBytes32(25),
            shares: data.toUint128(57),
            isIssuance: data.toBool(73)
        });
    }

    function serialize(TriggerUpdateShares memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.TriggerUpdateShares, t.poolId, t.scId, t.who, t.shares, t.isIssuance);
    }

    //---------------------------------------
    //    TriggerSubmitQueuedShares
    //---------------------------------------

    struct TriggerSubmitQueuedShares {
        uint64 poolId;
        bytes16 scId;
    }

    function deserializeTriggerSubmitQueuedShares(bytes memory data)
        internal
        pure
        returns (TriggerSubmitQueuedShares memory)
    {
        require(messageType(data) == MessageType.TriggerSubmitQueuedShares, UnknownMessageType());
        return TriggerSubmitQueuedShares({poolId: data.toUint64(1), scId: data.toBytes16(9)});
    }

    function serialize(TriggerSubmitQueuedShares memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.TriggerSubmitQueuedShares, t.poolId, t.scId);
    }

    //---------------------------------------
    //    TriggerSubmitQueuedAssets
    //---------------------------------------

    struct TriggerSubmitQueuedAssets {
        uint64 poolId;
        bytes16 scId;
        uint128 assetId;
    }

    function deserializeTriggerSubmitQueuedAssets(bytes memory data)
        internal
        pure
        returns (TriggerSubmitQueuedAssets memory)
    {
        require(messageType(data) == MessageType.TriggerSubmitQueuedAssets, UnknownMessageType());
        return
            TriggerSubmitQueuedAssets({poolId: data.toUint64(1), scId: data.toBytes16(9), assetId: data.toUint128(25)});
    }

    function serialize(TriggerSubmitQueuedAssets memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.TriggerSubmitQueuedAssets, t.poolId, t.scId, t.assetId);
    }

    //---------------------------------------
    //    SetQueue
    //---------------------------------------

    struct SetQueue {
        uint64 poolId;
        bytes16 scId;
        bool enabled;
    }

    function deserializeSetQueue(bytes memory data) internal pure returns (SetQueue memory) {
        require(messageType(data) == MessageType.SetQueue, UnknownMessageType());
        return SetQueue({poolId: data.toUint64(1), scId: data.toBytes16(9), enabled: data.toBool(25)});
    }

    function serialize(SetQueue memory t) internal pure returns (bytes memory) {
        return abi.encodePacked(MessageType.SetQueue, t.poolId, t.scId, t.enabled);
    }
}
