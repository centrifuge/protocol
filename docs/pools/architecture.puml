@startuml
circle Vaults

class Holdings<wards = PoolManager> <<(C, lightskyblue)>> {
    + create(poolId, scId, assetId, valuation, accounts)
    + increase(poolId, scId, assetId, valuation) -> increasedValue
    + decrease(poolId, scId, assetId, valuation) -> decreasedValue
    + update(poolId, scId, assetId) -> diff
    + updateValuation(poolId, scId, assetId)
    + setAccountId(poolId, scId, assetId)
}

class PoolRegistry<wards = PoolManager> {
    + registerAsset(assetId, decimals)
    + registerPool(admin, currencyId, shareClassManagerAddress) -> poolId
    + updateDependency(poolId, what, dependency)
    + updateCurrency(poolId, currency)
    + updateAdmin(poolId, admin, bool)
    + allowInvestorAsset(poolId, asset, bool)
    + setMetadata(poolId, metadata)
}

interface IShareClassManager {
    + addShareClass(poolId, name, symbol, data) -> newScId
    + requestDeposit(poolId, scId, assetId, investor, amount)
    + cancelDepositRequest(poolId, scId, assetId, investor) -> (cancelled)
    + requestRedeem(poolId, scId, assetId, investor, amount)
    + cancelRedeemRequest(poolId, scId, assetId, investor) -> (cancelled)
    + approveDeposits(poolId, scId, assetId, ratio, valuation) -> (approve, pending)
    + approveRedeems(poolId, scId, assetId, ratio, valuation) -> (approve, pending)
    + issueShares(poolId, scId, assetId, navPerShare)
    + revokeShares(poolId, scId, assetId, navPerShare) -> (assetAmount, poolAmount)
    + claimDeposit(poolId, scId, assetId, investor) -> (assetAmount, shareAmount)
    + claimRedeem(poolId, scId, assetId, investor) -> (assetAmount, shareAmount)
    + updateShareClassNav(poolId, scId)
    + update(poolId, data)
    + updateMetadata(poolId, scId, name, symbol, data)
}

class MultiShareClass<wards = PoolManager> <<(C, lightskyblue)>>{ }
MultiShareClass -down|> IShareClassManager

class Accounting<wards = PoolManager> {
    + createAccount(poolId, account, isDebitNormal)
    + setAccountMetadata(poolId, account, metadata)
    + lock(poolId, transactionId)
    + unlock()
    + addCredit(account, value)
    + addDebit(account, value)
}

class Multicall {
    + aggregate(targets, datas) -> results
}

class PoolLocker {
    + execute(poolId, targets, datas) -> results
    # _beforeUnlock(poolId)
    # _beforeLock()
}

PoolLocker -right-> Multicall

enum EscrowType {
    ShareClass
    PendingShareClass
}

enum AccountType {
    Asset,
    Equity,
    Loss,
    Gain,
    Expense,
    Liability
}

interface IPoolManagerHandler {
    + handleRegisterAsset()
    + handleRequestDeposit()
    + handleRequestRedeem()
    + handleCancelDepositRequest()
    + handleCancelRedeemRequest()
    + handleLockedTokens()
}

class PoolManager <<(C, lightskyblue)>> {
    -- pemisionless --
    + createPool()
    + claimRedeem()
    + claimDeposit()
    -- pool admin --
    + notifyPool()
    + notifyShareClass()
    + setPoolMetadata()
    + setPoolAdmin()
    + allowInvestorAsset()
    + addShareClass()
    + approveDeposit()
    + approveRedeem()
    + issueShares()
    + revokeShares()
    + createHolding()
    + increaseHolding()
    + decreaseHolding()
    + updateHolding()
    + updateHoldingValuation()
    + setHoldingAccountId()
    + createAccount()
    + setAccountMetadata()
    + addDebit()
    + addCredit()
    + unlockTokens()
}

PoolManager -up-|> IPoolManagerHandler
PoolManager -up--|> PoolLocker
PoolManager -up-> EscrowType
PoolManager -up-> AccountType
PoolManager -down---> PoolRegistry
PoolManager -left-> IShareClassManager
PoolManager -down--> Accounting
PoolManager -down--> Holdings
PoolManager -right-> Gateway

class Gateway<wards = PoolManager, Vaults> <<(C, lightskyblue)>> {
    + sendXYZ(msg)
    + handle(msg)
}

Gateway <-[thickness=4]right-> Vaults
Gateway -up-> IPoolManagerHandler

@enduml
